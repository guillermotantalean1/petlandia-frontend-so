<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel Admin - Petlandia</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- jQuery (necesario para Bootstrap) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Bootstrap Bundle con Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h2>Panel de Administración</h2>

        <!-- Tabs -->
        <ul class="nav nav-tabs" id="adminTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="products-tab" data-bs-toggle="tab" href="#products">Productos</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="associations-tab" data-bs-toggle="tab" href="#associations">Asociaciones</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders">Órdenes</a>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content mt-3">
            <!-- Products Tab -->
            <div class="tab-pane fade show active" id="products">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3>Gestión de Productos</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal">
                        Agregar Producto
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Precio</th>
                                <th>Stock</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="productsTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Associations Tab -->
            <div class="tab-pane fade" id="associations">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3>Gestión de Asociaciones</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#associationModal">
                        Agregar Asociación
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="associationsTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Orders Tab -->
            <div class="tab-pane fade" id="orders">
                <h3>Gestión de Órdenes</h3>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Usuario</th>
                                <th>Total</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="ordersTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Modal -->
    <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Agregar/Editar Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="productForm" onsubmit="return false;">
                        <input type="hidden" id="productId" name="productId">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="productName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="productDescription" class="form-label">Descripción</label>
                            <textarea class="form-control" id="productDescription" name="description" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="productPrice" class="form-label">Precio</label>
                            <input type="number" class="form-control" id="productPrice" name="price" step="0.01" min="0" required>
                        </div>
                        <div class="mb-3">
                            <label for="productStock" class="form-label">Stock</label>
                            <input type="number" class="form-control" id="productStock" name="stock" min="0" required>
                        </div>
                        <div class="mb-3">
                            <label for="productStatus" class="form-label">Estado</label>
                            <select class="form-control" id="productStatus" name="status" required>
                                <option value="active">Activo</option>
                                <option value="inactive">Inactivo</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" onclick="saveProduct()">Guardar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Association Modal -->
    <div class="modal fade" id="associationModal" tabindex="-1" aria-labelledby="associationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="associationModalLabel">Agregar/Editar Asociación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="associationForm" onsubmit="return false;">
                        <input type="hidden" id="associationId" name="associationId">
                        <div class="mb-3">
                            <label for="associationName" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="associationName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="associationDescription" class="form-label">Descripción</label>
                            <textarea class="form-control" id="associationDescription" name="description" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="associationStatus" class="form-label">Estado</label>
                            <select class="form-control" id="associationStatus" name="status" required>
                                <option value="active">Activo</option>
                                <option value="inactive">Inactivo</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" onclick="saveAssociation()">Guardar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Custom JS -->
    <script>
        // Variables globales para almacenar los items actuales
        let currentProducts = [];
        let currentAssociations = [];
        let currentOrders = [];

        // Cargar datos cuando la página se carga
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Cargando datos iniciales...');
            loadProducts();
            loadAssociations();
            loadOrders();

            // Configurar el evento para limpiar el formulario cuando se abre el modal
            document.getElementById('productModal').addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const isEdit = button.getAttribute('data-edit');
                
                if (!isEdit) {
                    // Si es nuevo producto, limpiar el formulario
                    document.getElementById('productForm').reset();
                    document.getElementById('productId').value = '';
                }
            });

            // Configurar el evento para limpiar el formulario cuando se abre el modal de asociación
            document.getElementById('associationModal').addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const isEdit = button.getAttribute('data-edit');
                
                if (!isEdit) {
                    // Si es nueva asociación, limpiar el formulario
                    document.getElementById('associationForm').reset();
                    document.getElementById('associationId').value = '';
                }
            });
        });

        // Gestión de Productos
        async function loadProducts() {
            try {
                console.log('Solicitando productos...');
                const response = await axios.get('/api/products');
                console.log('Productos recibidos:', response.data);
                currentProducts = response.data;
                renderProducts();
            } catch (error) {
                console.error('Error cargando productos:', error);
                if (error.response) {
                    console.error('Error response:', error.response.data);
                }
                alert('Error al cargar productos: ' + (error.response?.data?.error || error.message));
            }
        }

        function renderProducts() {
            const tbody = document.getElementById('productsTableBody');
            if (!tbody) {
                console.error('No se encontró el elemento productsTableBody');
                return;
            }
            
            tbody.innerHTML = currentProducts.map(product => `
                <tr>
                    <td>${product.name}</td>
                    <td>$${product.price.toFixed(2)}</td>
                    <td>${product.stock}</td>
                    <td>${product.status}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="editProduct('${product._id}')" data-edit="true">
                            Editar
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteProduct('${product._id}')">
                            Eliminar
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function editProduct(productId) {
            console.log('Editando producto:', productId);
            const product = currentProducts.find(p => p._id === productId);
            if (product) {
                document.getElementById('productId').value = product._id;
                document.getElementById('productName').value = product.name;
                document.getElementById('productDescription').value = product.description;
                document.getElementById('productPrice').value = product.price;
                document.getElementById('productStock').value = product.stock;
                document.getElementById('productStatus').value = product.status;
                
                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                modal.show();
            }
        }

        async function saveProduct() {
            console.log('Guardando producto...');

            try {
                const productData = {
                    name: document.getElementById('productName').value,
                    description: document.getElementById('productDescription').value,
                    price: parseFloat(document.getElementById('productPrice').value),
                    stock: parseInt(document.getElementById('productStock').value),
                    status: document.getElementById('productStatus').value
                };

                console.log('Datos del producto a guardar:', productData);

                const productId = document.getElementById('productId').value;
                let response;

                if (productId) {
                    console.log('Actualizando producto existente:', productId);
                    response = await axios.put(`/api/products/${productId}`, productData);
                } else {
                    console.log('Creando nuevo producto');
                    response = await axios.post('/api/products', productData);
                }

                console.log('Respuesta del servidor:', response.data);

                if (response.status === 201 || response.status === 200) {
                    const modalElement = document.getElementById('productModal');
                    const modal = bootstrap.Modal.getInstance(modalElement);
                    if (modal) {
                        modal.hide();
                    } else {
                        console.error('No se pudo encontrar la instancia del modal');
                    }
                    
                    document.getElementById('productForm').reset();
                    await loadProducts();
                    alert('Producto guardado exitosamente');
                } else {
                    throw new Error('Error al guardar el producto: respuesta inesperada del servidor');
                }
            } catch (error) {
                console.error('Error guardando producto:', error);
                if (error.response) {
                    console.error('Error response:', error.response.data);
                }
                alert('Error al guardar el producto: ' + (error.response?.data?.error || error.message));
            }
        }

        async function deleteProduct(productId) {
            if (confirm('¿Está seguro de que desea eliminar este producto?')) {
                try {
                    console.log('Eliminando producto:', productId);
                    const response = await axios.delete(`/api/products/${productId}`);
                    console.log('Respuesta del servidor:', response.data);
                    await loadProducts();
                    alert('Producto eliminado exitosamente');
                } catch (error) {
                    console.error('Error eliminando producto:', error);
                    if (error.response) {
                        console.error('Error response:', error.response.data);
                    }
                    alert('Error al eliminar producto: ' + (error.response?.data?.error || error.message));
                }
            }
        }

        // Gestión de Asociaciones
        async function loadAssociations() {
            try {
                const response = await axios.get('/api/associations');
                currentAssociations = response.data;
                renderAssociations();
            } catch (error) {
                console.error('Error cargando asociaciones:', error);
                alert('Error al cargar asociaciones');
            }
        }

        function renderAssociations() {
            const tbody = document.getElementById('associationsTableBody');
            tbody.innerHTML = currentAssociations.map(association => `
                <tr>
                    <td>${association.name}</td>
                    <td>${association.description}</td>
                    <td>${association.status}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="editAssociation('${association._id}')">
                            Editar
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteAssociation('${association._id}')">
                            Eliminar
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function editAssociation(associationId) {
            const association = currentAssociations.find(a => a._id === associationId);
            if (association) {
                document.getElementById('associationId').value = association._id;
                document.getElementById('associationName').value = association.name;
                document.getElementById('associationDescription').value = association.description;
                document.getElementById('associationStatus').value = association.status;
                
                const modal = new bootstrap.Modal(document.getElementById('associationModal'));
                modal.show();
            }
        }

        async function saveAssociation() {
            try {
                const associationData = {
                    name: document.getElementById('associationName').value,
                    description: document.getElementById('associationDescription').value,
                    status: document.getElementById('associationStatus').value
                };

                const associationId = document.getElementById('associationId').value;

                if (associationId) {
                    await axios.put(`/api/associations/${associationId}`, associationData);
                } else {
                    await axios.post('/api/associations', associationData);
                }

                bootstrap.Modal.getInstance(document.getElementById('associationModal')).hide();
                document.getElementById('associationForm').reset();
                loadAssociations();
            } catch (error) {
                console.error('Error guardando asociación:', error);
                alert('Error al guardar asociación');
            }
        }

        async function deleteAssociation(associationId) {
            if (confirm('¿Está seguro de que desea eliminar esta asociación?')) {
                try {
                    await axios.delete(`/api/associations/${associationId}`);
                    loadAssociations();
                } catch (error) {
                    console.error('Error eliminando asociación:', error);
                    alert('Error al eliminar asociación');
                }
            }
        }

        // Gestión de Órdenes
        async function loadOrders() {
            try {
                const response = await axios.get('/api/orders');
                currentOrders = response.data;
                renderOrders();
            } catch (error) {
                console.error('Error cargando órdenes:', error);
                alert('Error al cargar órdenes');
            }
        }

        function renderOrders() {
            const tbody = document.getElementById('ordersTableBody');
            tbody.innerHTML = currentOrders.map(order => `
                <tr>
                    <td>${order._id}</td>
                    <td>${order.user_id?.name || 'Desconocido'}</td>
                    <td>$${calculateOrderTotal(order).toFixed(2)}</td>
                    <td>${order.status}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="updateOrderStatus('${order._id}')">
                            Actualizar Estado
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function calculateOrderTotal(order) {
            return order.products.reduce((total, item) => total + (item.product_id?.price * item.quantity), 0);
        }

        async function updateOrderStatus(orderId) {
            const newStatus = prompt('Ingrese el nuevo estado (pending, processing, completed, cancelled):');
            if (newStatus && ['pending', 'processing', 'completed', 'cancelled'].includes(newStatus)) {
                try {
                    await axios.put(`/api/orders/${orderId}`, { status: newStatus });
                    loadOrders();
                } catch (error) {
                    console.error('Error actualizando estado de orden:', error);
                    alert('Error al actualizar estado de orden');
                }
            } else if (newStatus) {
                alert('Estado no válido');
            }
        }
    </script>
</body>
</html> 